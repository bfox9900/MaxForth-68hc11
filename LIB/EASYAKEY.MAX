( KEY & EMIT interface for EASY protocol in multi-task Forth 24MAR94 FOX)

DECIMAL
-1 CONSTANT TRUE
 0 CONSTANT FALSE

HEX
   B02F CONSTANT SCDR          ( serial communication data reg.)
   B02E CONSTANT SCSR          ( serial communication status reg.)

    16 6 -  USER UKEY                    ( vector address of key routine)
    18 6 -  USER UEMIT

( added these to make the polling a little faster )
CODE SCRX? ( -- c)             ( is serial rx. ready )
        F6 C, SCSR ,           ( ldab scsr           )
        C4 C, 20 C,            ( andb # 20           )
        4F C,                  ( clra                )
        7E C, FE43 ,           ( jmp PUSHD           )
END-CODE

CODE SCTX?  ( -- c )           ( is serial tx. empty )
        F6 C, SCSR ,           ( ldab SCSR           )
        C4 C,  80 C,           ( andb # 80           )
        4F C,                  ( clra                )
        7E C, FE43 ,           ( jmp PUSHD            )
END-CODE

CODE SCDR@ ( -- c)             ( is serial rx. ready )
        F6 C, SCDR ,           ( ldab scsr           )
        4F C,                  ( clra                )
        7E C, FE43 ,           ( jmp PUSHD           )
END-CODE

( these I/O words SWITCH CONTEXT every time they execute! )
: MKEY  ( -- c )
        BEGIN
            YIELD
            SCRX?               ( code word minimizes getting status)
        END                     ( END does not yield )
        SCDR@ ;                 ( code word gets the data faster )

DECIMAL
: me  ( -- c )   65 ( UNIT# @ ) ;

 01 CONSTANT ^A
VARIABLE ( 2 BYTES ) SELECTED         ( flag varible to tell the system)
                                        ( that God is talking to it.  :- )

HEX
: TX-ON  ( -- )
        PORTA C@ 10 OR PORTA C!
        TRUE SELECTED ! ;

: TX-OFF ( -- )
        PORTA C@ 10 NEGATE AND PORTA C!
        FALSE SELECTED ! ;

: ETX
        TX-OFF
        BEGIN                   ( this is the entire protocol            )
           BEGIN
             MKEY ^A =           ( wait for ^A )
           UNTIL
           MKEY me =             ( then check for your own ID
        UNTIL                    ( loop until above is true              )
        TX-ON
        ^A EMIT me EMIT         ( reply with ^A and my ID #             )
        QUIT ;                  ( run the Forth interpreter             )

: EASYKEY ( -- c )
        MKEY
        DUP ^A =  SELECTED @  AND
        IF
           DROP ETX
        THEN ;


: MEMIT ( c -- )                ( I slowed this down a little to    )
        BEGIN                   ( make sure the terminal doesn't get)
            YIELD               ( too many cycles )
            SCTX?
        END
        SCDR C!                 ( after emiting a char... we yield)
        YIELD ;

( These are hi-level FORTH sub-routines. They are easier to write and  )
( test than assembler I/O routines.  They can be called by a JSR       )
( instruction!  Therefore they can be used to re-vector UKEY & UEMIT   )
( so ALL input will execute a YIELD OPERATION on completion            )
HEX
CODE <MKEY>
       CC C, ' MKEY CFA ,     ( LDD ' MKEY CFA
       BD C, ATO4 ,            ( JSR  ATO4 ( assembler to Forth converter)
       39 C,                   ( RTS
 END-CODE

CODE <EASYKEY>
       CC C, ' EASYKEY CFA ,     ( LDD ' MKEY CFA
       BD C, ATO4 ,            ( JSR  ATO4 ( assembler to Forth converter)
       39 C,                   ( RTS
 END-CODE

CODE <MEMIT>
       CC C, ' MEMIT CFA ,     ( LDD ' MEMIT CFA
       BD C, ATO4 ,            ( JSR  ATO4 ( assembler to Forth converter)
       39 C,                   ( RTS
 END-CODE

( ** Think about these words carefully before admitting you don't get it **)

( At compile time we FETCH the present sub-routine address of UKEY and)
( lock it in as a literal number in this WORD definition.             )
( Now when we execute this word it will make the value of UKEY the    )
( RS232 port sub-routine address. )

: STD-IO ( SINGLE ) ( -I/O)
       [  UKEY @ ] LITERAL UKEY !
       [ UEMIT @ ] LITERAL UEMIT ! ;

( Here we set UKEY & UEMIT to the value of our new sub-routines )
: MULTI-IO
       [ ' <MKEY> @  ] LITERAL UKEY !
       [ ' <MEMIT> @ ] LITERAL UEMIT ! ;

: EASY_ON
       [ ' EASYKEY @ ] LITERAL UKEY ! ;
DECIMAL


